
Skip to main content
Microsoft
.NET
.NET
.NET

    Home
    APIs
    .NET Core
    .NET Framework
    ASP.NET
    Xamarin
    Azure
    More

    All Microsoft
            Office
            Windows
            Surface
            Xbox
            Deals
            Support
        Software
            Windows apps
            OneDrive
            Outlook
            Skype
            OneNote
        PCs & Devices
            PCs & tablets
            Accessories
        Entertainment
            Xbox games
            PC games
            Windows digital games
            Movies & TV
            Books
        Business
            Microsoft Azure
            Microsoft Dynamics 365
            Microsoft 365
            Enterprise
            Data platform
            Microsoft Advertising
        Developer & IT
            .NET
            Visual Studio
            Windows Server
            Windows Dev Center
            Docs
        Other
            Microsoft Store
            Microsoft Rewards
            Free downloads & security
            Education
            Store locations
            Gift cards
        View all

Search

Cancel

    Docs
    .NET
    .NET Framework
    Windows Presentation Foundation
    Advanced (Windows Presentation Foundation)

Exit focus mode
Contents

    Feedback
    Edit
    Share
        Twitter
        LinkedIn
        Facebook
        Email
    Dark
    C#
        C#
        VB
    Sign in

        Profile
        Sign out

Contents
In this article

    What is XAML?
    XAML syntax in brief
    Case and white space in XAML
    Markup extensions
    Type converters
    XAML root elements and XAML namespaces
    Custom prefixes and custom types in XAML
    Events and XAML code-behind
    XAML named elements
    Attached properties and attached events
    Base types and XAML
    XAML security
    Loading XAML from code
    What's next
    See also

XAML overview (WPF)

    03/30/2017
    26 minutes to read
    Contributors
        dotnet bot
        Lucas Nobre de Oliveira
        Maira Wenzel
        Erlend
        Steven Tricanowicz
        all

In this article

    What is XAML?
    XAML syntax in brief
    Case and white space in XAML
    Markup extensions
    Type converters
    XAML root elements and XAML namespaces
    Custom prefixes and custom types in XAML
    Events and XAML code-behind
    XAML named elements
    Attached properties and attached events
    Base types and XAML
    XAML security
    Loading XAML from code
    What's next
    See also

This topic describes the features of the XAML language and demonstrates how you can use XAML to write Windows Presentation Foundation (WPF) applications. This topic specifically describes XAML as implemented by WPF. XAML itself is a larger language concept than WPF.

What is XAML?

XAML is a declarative markup language. As applied to the .NET Framework programming model, XAML simplifies creating a UI for a .NET Framework application. You can create visible UI elements in the declarative XAML markup, and then separate the UI definition from the run-time logic by using code-behind files, joined to the markup through partial class definitions. XAML directly represents the instantiation of objects in a specific set of backing types defined in assemblies. This is unlike most other markup languages, which are typically an interpreted language without such a direct tie to a backing type system. XAML enables a workflow where separate parties can work on the UI and the logic of an application, using potentially different tools.

When represented as text, XAML files are XML files that generally have the .xaml extension. The files can be encoded by any XML encoding, but encoding as UTF-8 is typical.

The following example shows how you might create a button as part of a UI. This example is just intended to give you a flavor of how XAML represents common UI programming metaphors (it is not a complete sample).

 <StackPanel> <Button Content="Click Me"/> </StackPanel>  

XAML syntax in brief

The following sections explain the basic forms of XAML syntax, and give a short markup example. These sections are not intended to provide complete information about each syntax form, such as how these are represented in the backing type system. For more information about the specifics of XAML syntax for each of the syntax forms introduced in this topic, see XAML Syntax In Detail .

Much of the material in the next few sections will be elementary to you, if you have previous familiarity with the XML language. This is a consequence of one of the basic design principles of XAML. The XAML language defines concepts of its own, but these concepts work within the XML language and markup form.
XAML object elements

An object element typically declares an instance of a type. That type is defined in the assemblies that provide the backing types for a technology that uses XAML as a language.

Object element syntax always starts with an opening angle bracket (<). This is followed by the name of the type where you want to create an instance. (The name can possibly include a prefix, a concept that will be explained later.) After this, you can optionally declare attributes on the object element. To complete the object element tag, end with a closing angle bracket (>). You can instead use a self-closing form that does not have any content, by completing the tag with a forward slash and closing angle bracket in succession (/>). For example, look at the previously shown markup snippet again:

 <StackPanel> <Button Content="Click Me"/> </StackPanel>  

This specifies two object elements: <StackPanel> (with content, and a closing tag later), and <Button .../> (the self-closing form, with several attributes). The object elements StackPanel and Button each map to the name of a class that is defined by WPF and is part of the WPF assemblies. When you specify an object element tag, you create an instruction for XAML processing to create a new instance. Each instance is created by calling the default constructor of the underlying type when parsing and loading the XAML.
Attribute syntax (properties)

Properties of an object can often be expressed as attributes of the object element. An attribute syntax names the property that is being set in attribute syntax, followed by the assignment operator (=). The value of an attribute is always specified as a string that is contained within quotation marks.

Attribute syntax is the most streamlined property setting syntax and is the most intuitive syntax to use for developers who have used markup languages in the past. For example, the following markup creates a button that has red text and a blue background in addition to display text specified as Content .

 <Button Background="Blue" Foreground="Red" Content="This is a button"/>  

Property element syntax

For some properties of an object element, attribute syntax is not possible, because the object or information necessary to provide the property value cannot be adequately expressed within the quotation mark and string restrictions of attribute syntax. For these cases, a different syntax known as property element syntax can be used.

The syntax for the property element start tag is < typeName . propertyName > . Generally, the content of that tag is an object element of the type that the property takes as its value . After specifying content, you must close the property element with an end tag. The syntax for the end tag is </ typeName . propertyName > .

If an attribute syntax is possible, using the attribute syntax is typically more convenient and enables a more compact markup, but that is often just a matter of style, not a technical limitation. The following example shows the same properties being set as in the previous attribute syntax example, but this time by using property element syntax for all properties of the Button .

 <Button> <Button.Background> <SolidColorBrush Color="Blue"/> </Button.Background> <Button.Foreground> <SolidColorBrush Color="Red"/> </Button.Foreground> <Button.Content> This is a button </Button.Content> </Button>  

Collection syntax

The XAML language includes some optimizations that produce more human-readable markup. One such optimization is that if a particular property takes a collection type, then items that you declare in markup as child elements within that property's value become part of the collection. In this case a collection of child object elements is the value being set to the collection property.

The following example shows collection syntax for setting values of the GradientStops property:

 <LinearGradientBrush> <LinearGradientBrush.GradientStops> <!-- no explicit new GradientStopCollection, parser knows how to find or create --> <GradientStop Offset="0.0" Color="Red" /> <GradientStop Offset="1.0" Color="Blue" /> </LinearGradientBrush.GradientStops> </LinearGradientBrush>  

XAML content properties

XAML specifies a language feature whereby a class can designate exactly one of its properties to be the XAML content property. Child elements of that object element are used to set the value of that content property. In other words, for the content property uniquely, you can omit a property element when setting that property in XAML markup and produce a more visible parent/child metaphor in the markup.

For example, Border specifies a content property of Child . The following two Border elements are treated identically. The first one takes advantage of the content property syntax and omits the Border.Child property element. The second one shows Border.Child explicitly.

 <Border> <TextBox Width="300"/> </Border> <!--explicit equivalent--> <Border> <Border.Child> <TextBox Width="300"/> </Border.Child> </Border>  

As a rule of the XAML language, the value of a XAML content property must be given either entirely before or entirely after any other property elements on that object element. For instance, the following markup does not compile:

 <Button>I am a <Button.Background>Blue</Button.Background> blue button</Button>  

For more information about this restriction on XAML content properties, see the "XAML Content Properties" section of XAML Syntax In Detail .
Text content

A small number of XAML elements can directly process text as their content. To enable this, one of the following cases must be true:

    The class must declare a content property, and that content property must be of a type assignable to a string (the type could be Object ). For instance, any ContentControl uses Content as its content property and it is type Object , and this supports the following usage on a practical ContentControl such as a Button : <Button>Hello</Button> .

    The type must declare a type converter, in which case the text content is used as initialization text for that type converter. For example, <Brush>Blue</Brush> . This case is less common in practice.

    The type must be a known XAML language primitive.

Content properties and collection syntax combined

Consider this example:

 <StackPanel> <Button>First Button</Button> <Button>Second Button</Button> </StackPanel>  

Here, each Button is a child element of StackPanel . This is a streamlined and intuitive markup that omits two tags for two different reasons.

    Omitted StackPanel.Children property element: StackPanel derives from Panel . Panel defines Panel.Children as its XAML content property.

    Omitted UIElementCollection object element: The Panel.Children property takes the type UIElementCollection , which implements IList . The collection's element tag can be omitted, based on the XAML rules for processing collections such as IList . (In this case, UIElementCollection actually cannot be instantiated because it does not expose a default constructor, and that is why the UIElementCollection object element is shown commented out).

 <StackPanel> <StackPanel.Children> <!--<UIElementCollection>--> <Button>First Button</Button> <Button>Second Button</Button> <!--</UIElementCollection>--> </StackPanel.Children> </StackPanel>  

Attribute syntax (events)

Attribute syntax can also be used for members that are events rather than properties. In this case, the attribute's name is the name of the event. In the WPF implementation of events for XAML, the attribute's value is the name of a handler that implements that event's delegate. For example, the following markup assigns a handler for the Click event to a Button created in markup:

 <Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:Class="ExampleNamespace.ExamplePage"> <Button Click="Button_Click" >Click Me!</Button> </Page>  

There is more to events and XAML in WPF than just this example of the attribute syntax. For example, you might wonder what the ClickHandler referenced here represents and how it is defined. This will be explained in the upcoming Events and XAML Code-Behind section of this topic.

Case and white space in XAML

XAML is generally speaking case sensitive. For purposes of resolving backing types, WPF XAML is case sensitive by the same rules that the CLR is case sensitive. Object elements, property elements, and attribute names must all be specified by using the sensitive casing when compared by name to the underlying type in the assembly, or to a member of a type. XAML language keywords and primitives are also case sensitive. Values are not always case sensitive. Case sensitivity for values will depend on the type converter behavior associated with the property that takes the value, or the property value type. For example, properties that take the Boolean type can take either true or True as equivalent values, but only because the native WPF XAML parser type conversion for string to Boolean already permits these as equivalents.

WPF XAML processors and serializers will ignore or drop all nonsignificant white space, and will normalize any significant white space. This is consistent with the default white-space behavior recommendations of the XAML specification. This behavior is generally only of consequence when you specify strings within XAML content properties. In simplest terms, XAML converts space, linefeed and tab characters into spaces, and then preserves one space if found at either end of a contiguous string. The full explanation of XAML white-space handling is not covered in this topic. For details, see White space processing in XAML .

Markup extensions

Markup extensions are a XAML language concept. When used to provide the value of an attribute syntax, curly braces ( { and } ) indicate a markup extension usage. This usage directs the XAML processing to escape from the general treatment of attribute values as either a literal string or a string-convertible value.

The most common markup extensions used in WPF application programming are Binding , used for data binding expressions, and the resource references StaticResource and DynamicResource . By using markup extensions, you can use attribute syntax to provide values for properties even if that property does not support an attribute syntax in general. Markup extensions often use intermediate expression types to enable features such as deferring values or referencing other objects that are only present at run time.

For example, the following markup sets the value of the Style property using attribute syntax. The Style property takes an instance of the Style class, which by default could not be instantiated by an attribute syntax string. But in this case, the attribute references a particular markup extension, StaticResource . When that markup extension is processed, it returns a reference to a style that was previously instantiated as a keyed resource in a resource dictionary.

 <Page.Resources> <SolidColorBrush x:Key="MyBrush" Color="Gold"/> <Style TargetType="Border" x:Key="PageBackground"> <Setter Property="Background" Value="Blue"/> </Style>  

 </Page.Resources> <StackPanel> <Border Style="{StaticResource PageBackground}">  

 </Border> </StackPanel>  

For a reference listing of all markup extensions for XAML implemented specifically in WPF, see WPF XAML Extensions . For a reference listing of the markup extensions that are defined by System.Xaml and are more widely available for .NET Framework XAML implementations, see XAML Namespace (x:) Language Features . For more information about markup extension concepts, see Markup Extensions and WPF XAML .

Type converters

In the XAML Syntax in Brief section, it was stated that the attribute value must be able to be set by a string. The basic, native handling of how strings are converted into other object types or primitive values is based on the String type itself, in addition to native processing for certain types such as DateTime or Uri . But many WPF types or members of those types extend the basic string attribute processing behavior, in such a way that instances of more complex object types can be specified as strings and attributes.

The Thickness structure is an example of a type that has a type conversion enabled for XAML usages. Thickness indicates measurements within a nested rectangle and is used as the value for properties such as Margin . By placing a type converter on Thickness , all properties that use a Thickness are easier to specify in XAML because they can be specified as attributes. The following example uses a type conversion and attribute syntax to provide a value for a Margin :

 <Button Margin="10,20,10,30" Content="Click me"/>  

The previous attribute syntax example is equivalent to the following more verbose syntax example, where the Margin is instead set through property element syntax containing a Thickness object element. The four key properties of Thickness are set as attributes on the new instance:

 <Button Content="Click me"> <Button.Margin> <Thickness Left="10" Top="20" Right="10" Bottom="30"/> </Button.Margin> </Button>  

Note

There are also a limited number of objects where the type conversion is the only public way to set a property to that type without involving a subclass, because the type itself does not have a default constructor. An example is Cursor .

For more information on how type conversion and its use for attribute syntax is supported, see TypeConverters and XAML .

XAML root elements and XAML namespaces

A XAML file must have only one root element, in order to be both a well-formed XML file and a valid XAML file. For typical WPF scenarios, you use a root element that has a prominent meaning in the WPF application model (for example, Window or Page for a page, ResourceDictionary for an external dictionary, or Application for the application definition). The following example shows the root element of a typical XAML file for a WPF page, with the root element of Page .

 <Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">  

 </Page>  

The root element also contains the attributes xmlns and xmlns:x . These attributes indicate to a XAML processor which XAML namespaces contain the type definitions for backing types that the markup will reference as elements. The xmlns attribute specifically indicates the default XAML namespace. Within the default XAML namespace, object elements in the markup can be specified without a prefix. For most WPF application scenarios, and for almost all of the examples given in the WPF sections of the SDK, the default XAML namespace is mapped to the WPF namespace http://schemas.microsoft.com/winfx/2006/xaml/presentation . The xmlns:x attribute indicates an additional XAML namespace, which maps the XAML language namespace http://schemas.microsoft.com/winfx/2006/xaml .

This usage of xmlns to define a scope for usage and mapping of a namescope is consistent with the XML 1.0 specification. XAML namescopes are different from XML namescopes only in that a XAML namescope also implies something about how the namescope's elements are backed by types when it comes to type resolution and parsing the XAML.

Note that the xmlns attributes are only strictly necessary on the root element of each XAML file. xmlns definitions will apply to all descendant elements of the root element (this behavior is again consistent with the XML 1.0 specification for xmlns .) xmlns attributes are also permitted on other elements underneath the root, and would apply to any descendant elements of the defining element. However, frequent definition or redefinition of XAML namespaces can result in a XAML markup style that is difficult to read.

The WPF implementation of its XAML processor includes an infrastructure that has awareness of the WPF core assemblies. The WPF core assemblies are known to contain the types that support the WPF mappings to the default XAML namespace. This is enabled through configuration that is part of your project build file and the WPF build and project systems. Therefore, declaring the default XAML namespace as the default xmlns is all that is necessary in order to reference XAML elements that come from WPF assemblies.
The x: prefix

In the previous root element example, the prefix x: was used to map the XAML namespace http://schemas.microsoft.com/winfx/2006/xaml , which is the dedicated XAML namespace that supports XAML language constructs. This x: prefix is used for mapping this XAML namespace in the templates for projects, in examples, and in documentation throughout this SDK. The XAML namespace for the XAML language contain several programming constructs that you will use very frequently in your XAML. The following is a listing of the most common x: prefix programming constructs you will use:

    x:Key : Sets a unique key for each resource in a ResourceDictionary (or similar dictionary concepts in other frameworks). x:Key will probably account for 90% of the x: usages you will see in a typical WPF application's markup.

    x:Class : Specifies the CLR namespace and class name for the class that provides code-behind for a XAML page. You must have such a class to support code-behind per the WPF programming model, and therefore you almost always see x: mapped, even if there are no resources.

    x:Name : Specifies a run-time object name for the instance that exists in run-time code after an object element is processed. In general, you will frequently use a WPF-defined equivalent property for x:Name . Such properties map specifically to a CLR backing property and are thus more convenient for application programming, where you frequently use run time code to find the named elements from initialized XAML. The most common such property is FrameworkElement.Name . You might still use x:Name when the equivalent WPF framework-level Name property is not supported in a particular type. This occurs in certain animation scenarios.

    x:Static : Enables a reference that returns a static value that is not otherwise a XAML-compatible property.

    x:Type : Constructs a Type reference based on a type name. This is used to specify attributes that take Type , such as Style.TargetType , although frequently the property has native string-to- Type conversion in such a way that the x:Type markup extension usage is optional.

There are additional programming constructs in the x: prefix/XAML namespace, which are not as common. For details, see XAML Namespace (x:) Language Features .

Custom prefixes and custom types in XAML

For your own custom assemblies, or for assemblies outside the WPF core of PresentationCore, PresentationFramework and WindowsBase, you can specify the assembly as part of a custom xmlns mapping. You can then reference types from that assembly in your XAML, so long as that type is correctly implemented to support the XAML usages you are attempting.

The following is a very basic example of how custom prefixes work in XAML markup. The prefix custom is defined in the root element tag, and mapped to a specific assembly that is packaged and available with the application. This assembly contains a type NumericUpDown , which is implemented to support general XAML usage as well as using a class inheritance that permits its insertion at this particular point in a WPF XAML content model. An instance of this NumericUpDown control is declared as an object element, using the prefix so that a XAML parser knows which XAML namespace contains the type, and therefore where the backing assembly is that contains the type definition.

 <Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:custom="clr-namespace:NumericUpDownCustomControl;assembly=CustomLibrary" > <StackPanel Name="LayoutRoot"> <custom:NumericUpDown Name="numericCtrl1" Width="100" Height="60"/> ... </StackPanel> </Page>  

For more information about custom types in XAML, see XAML and Custom Classes for WPF .

For more information about how XML namespaces and the namespaces of the backing code in assemblies are related, see XAML Namespaces and Namespace Mapping for WPF XAML .

Events and XAML code-behind

Most WPF applications consist of both XAML markup and code-behind. Within a project, the XAML is written as a .xaml file, and a CLR language such as Microsoft Visual Basic or C# is used to write a code-behind file. When a XAML file is markup compiled as part of the WPF programming and application models, the location of the XAML code-behind file for a XAML file is identified by specifying a namespace and class as the x:Class attribute of the root element of the XAML.

In the examples so far, you have seen several buttons, but none of these buttons had any logical behavior associated with them yet. The primary application-level mechanism for adding a behavior for an object element is to use an existing event of the element class, and to write a specific handler for that event that is invoked when that event is raised at run time. The event name and the name of the handler to use are specified in the markup, whereas the code that implements your handler is defined in the code-behind.

 <Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" x:Class="ExampleNamespace.ExamplePage"> <Button Click="Button_Click" >Click Me!</Button> </Page>  

 namespace ExampleNamespace { public partial class ExamplePage { void Button_Click(object sender, RoutedEventArgs e) { Button b = e.Source as Button; b.Foreground = Brushes.Red; } } }  

 Private Sub Button_Click(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs) Dim b As Button = e.Source b.Foreground = Brushes.Red End Sub  

Notice that the code-behind file uses the CLR namespace ExampleNamespace and declares ExamplePage as a partial class within that namespace. This parallels the x:Class attribute value of ExampleNamespace . ExamplePage that was provided in the markup root. The WPF markup compiler will create a partial class for any compiled XAML file, by deriving a class from the root element type. When you provide code-behind that also defines the same partial class, the resulting code is combined within the same namespace and class of the compiled application.

For more information about requirements for code-behind programming in WPF, see the "Code-behind, Event Handler, and Partial Class Requirements" section of Code-Behind and XAML in WPF .

If you do not want to create a separate code-behind file, you can also inline your code in a XAML file. However, inline code is a less versatile technique that has substantial limitations. For details, see Code-Behind and XAML in WPF .
Routed events

A particular event feature that is fundamental to WPF is a routed event. Routed events enable an element to handle an event that was raised by a different element, as long as the elements are connected through a tree relationship. When specifying event handling with a XAML attribute, the routed event can be listened for and handled on any element, including elements that do not list that particular event in the class members table. This is accomplished by qualifying the event name attribute with the owning class name. For instance, the parent StackPanel in the ongoing StackPanel / Button example could register a handler for the child element button's Click event by specifying the attribute Button.Click on the StackPanel object element, with your handler name as the attribute value. For more information about how routed events work, see Routed Events Overview .

XAML named elements

By default, the object instance that is created in an object graph by processing a XAML object element does not possess a unique identifier or object reference. In contrast, if you call a constructor in code, you almost always use the constructor result to set a variable to the constructed instance, so that you can reference the instance later in your code. In order to provide standardized access to objects that were created through a markup definition, XAML defines the x:Name attribute . You can set the value of the x:Name attribute on any object element. In your code-behind, the identifier you choose is equivalent to an instance variable that refers to the constructed instance. In all respects, named elements function as if they were object instances (the name references that instance), and your code-behind can reference the named elements to handle run-time interactions within the application. This connection between instances and variables is accomplished by the WPF XAML markup compiler, and more specifically involve features and patterns such as InitializeComponent that will not be discussed in detail in this topic.

WPF framework-level XAML elements inherit a Name property, which is equivalent to the XAML defined x:Name attribute. Certain other classes also provide property-level equivalents for x:Name , which is also generally defined as a Name property. Generally speaking, if you cannot find a Name property in the members table for your chosen element/type, use x:Name instead. The x:Name values will provide an identifier to a XAML element that can be used at run time, either by specific subsystems or by utility methods such as FindName .

The following example sets Name on a StackPanel element. Then, a handler on a Button within that StackPanel references the StackPanel through its instance reference buttonContainer as set by Name .

 <StackPanel Name="buttonContainer">  

 <Button Click="RemoveThis">Click to remove this button</Button> </StackPanel>  

 void RemoveThis(object sender, RoutedEventArgs e) { FrameworkElement fe = e.Source as FrameworkElement; if (buttonContainer.Children.Contains(fe)) { buttonContainer.Children.Remove(fe); } }  

 Private Sub RemoveThis(ByVal sender As System.Object, ByVal e As System.Windows.RoutedEventArgs) Dim fe As FrameworkElement = e.Source If (buttonContainer.Children.Contains(fe)) Then buttonContainer.Children.Remove(fe) End If End Sub  

Just like a variable, the XAML name for an instance is governed by a concept of scope, so that names can be enforced to be unique within a certain scope that is predictable. The primary markup that defines a page denotes one unique XAML namescope, with the XAML namescope boundary being the root element of that page. However, other markup sources can interact with a page at run time, such as styles or templates within styles, and such markup sources often have their own XAML namescopes that do not necessarily connect with the XAML namescope of the page. For more information on x:Name and XAML namescopes, see Name , x:Name Directive , or WPF XAML Namescopes .

Attached properties and attached events

XAML specifies a language feature that enables certain properties or events to be specified on any element, regardless of whether the property or event exists in the type's definitions for the element it is being set on. The properties version of this feature is called an attached property, the events version is called an attached event. Conceptually, you can think of attached properties and attached events as global members that can be set on any XAML element/object instance. However, that element/class or a larger infrastructure must support a backing property store for the attached values.

Attached properties in XAML are typically used through attribute syntax. In attribute syntax, you specify an attached property in the form ownerType . propertyName .

Superficially, this resembles a property element usage, but in this case the ownerType you specify is always a different type than the object element where the attached property is being set. ownerType is the type that provides the accessor methods that are required by a XAML processor in order to get or set the attached property value.

The most common scenario for attached properties is to enable child elements to report a property value to their parent element.

The following example illustrates the DockPanel.Dock attached property. The DockPanel class defines the accessors for DockPanel.Dock and therefore owns the attached property. The DockPanel class also includes logic that iterates its child elements and specifically checks each element for a set value of DockPanel.Dock . If a value is found, that value is used during layout to position the child elements. Use of the DockPanel.Dock attached property and this positioning capability is in fact the motivating scenario for the DockPanel class.

 <DockPanel> <Button DockPanel.Dock="Left" Width="100" Height="20">I am on the left</Button> <Button DockPanel.Dock="Right" Width="100" Height="20">I am on the right</Button> </DockPanel>  

In WPF, most or all the attached properties are also implemented as dependency properties. For details, see Attached Properties Overview .

Attached events use a similar ownerType . eventName form of attribute syntax. Just like the non-attached events, the attribute value for an attached event in XAML specifies the name of the handler method that is invoked when the event is handled on the element. Attached event usages in WPF XAML are less common. For more information, see Attached Events Overview .

Base types and XAML

Underlying WPF XAML and its XAML namespace is a collection of types that correspond to CLR objects in addition to markup elements for XAML. However, not all classes can be mapped to elements. Abstract classes, such as ButtonBase , and certain nonabstract base classes are used for inheritance in the CLR objects model. Base classes, including abstract ones, are still important to XAML development because each of the concrete XAML elements inherits members from some base class in its hierarchy. Often these members include properties that can be set as attributes on the element, or events that can be handled. FrameworkElement is the concrete base UI class of WPF at the WPF framework level. When designing UI, you will use various shape, panel, decorator, or control classes, which all derive from FrameworkElement . A related base class, FrameworkContentElement , supports document-oriented elements that work well for a flow layout presentation, using APIs that deliberately mirror the APIs in FrameworkElement . The combination of attributes at the element level and a CLR object model provides you with a set of common properties that are settable on most concrete XAML elements, regardless of the specific XAML element and its underlying type.

XAML security

XAML is a markup language that directly represents object instantiation and execution. Therefore, elements created in XAML have the same ability to interact with system resources (network access, file system IO, for example) as the equivalent generated code does.

WPF supports the .NET Framework 4 security framework Code Access Security (CAS). This means that WPF content running in the internet zone has reduced execution permissions. "Loose XAML" (pages of noncompiled XAML interpreted at load time by a XAML viewer) and XAML browser application (XBAP) are usually run in this internet zone and use the same permission set. However, XAML loaded in to a fully trusted application has the same access to the system resources as the hosting application does. For more information, see WPF Partial Trust Security .

Loading XAML from code

XAML can be used to define all of the UI, but it is sometimes also appropriate to define just a piece of the UI in XAML. This capability could be used to enable partial customization, local storage of information, using XAML to provide a business object, or a variety of possible scenarios. The key to these scenarios is the XamlReader class and its Load method. The input is a XAML file, and the output is an object that represents all of the run-time tree of objects that was created from that markup. You then can insert the object to be a property of another object that already exists in the application. So long as the property is an appropriate property in the content model that has eventual display capabilities and that will notify the execution engine that new content has been added into the application, you can modify a running application's contents very easily by loading in XAML. Note that this capability is generally only available in full-trust applications, because of the obvious security implications of loading files into applications as they run.

What's next

This topic provides a basic introduction to XAML syntax concepts and terminology as it applies to WPF. For more information about the terms used here, see XAML Syntax In Detail .

If you have not already done this, try the exercises in the tutorial topic Walkthrough: My first WPF desktop application . When you create the markup-centric application described by the tutorial, the exercise will help reinforce many of the concepts described in this topic.

WPF uses a particular application model that is based on the Application class. For details, see Application Management Overview .

Building a WPF Application gives you more details about how to build XAML inclusive applications from the command line and with Microsoft Visual Studio.

Dependency Properties Overview gives more information about the versatility of properties in WPF, and introduces the concept of dependency properties.
See also

XAML Syntax In Detail
XAML and Custom Classes for WPF
XAML Namespace (x:) Language Features
WPF XAML Extensions
Base Elements Overview
Trees in WPF
Feedback

We'd love to hear your thoughts. Choose the type you'd like to provide:
Product feedback
Sign in to give documentation feedback
You may also leave feedback directly on GitHub .
Content feedback
You may also leave feedback directly on GitHub .

Our new feedback system is built on GitHub Issues. Read about this change in our blog post .
Avatar Liquid error: Can't find the localized string giveDocumentationFeedback for template Conceptual.
Issue Title Leave a comment
Submit feedback

Loading feedback...

There are no open issues

There are no closed issues

View on GitHub
English (United States)

    Previous Version Docs
    Blog
    Contribute
    Privacy & Cookies
    Terms of Use
    Site Feedback
    Trademarks

Contents
Clear Filter
No results

    Advanced
        WPF Architecture
        XAML in WPF
            XAML Overview (WPF)
            XAML Syntax In Detail
            Code-Behind and XAML in WPF
            XAML and Custom Classes for WPF
            Markup Extensions and WPF XAML
            XAML Namespaces and Namespace Mapping for WPF XAML
            WPF XAML Namescopes
            Inline Styles and Templates
            Type Converters and XAML
            WPF XAML Extensions
                Binding Markup Extension
                Color Converted Bitmap Markup Extension
                Component Resource Key Markup Extension
                Date Time XAML Syntax
                Dynamic Resource Markup Extension
                Relative Source Markup Extension
                Static Resource Markup Extension
                Template Binding Markup Extension
                Theme Dictionary Markup Extension
                Property Path XAML Syntax
                Presentation Options:Freeze Attribute
            Markup Compatibility (mc:) Language Features
                mc:Ignorable Attribute
                mc:Process Content Attribute
        Base Elements
            Base Elements Overview
            Freezable Objects Overview
            Alignment, Margins, and Padding Overview
            How-to Topics
                Make a UIElement Transparent or Semi-Transparent
                Animate the Size of a Framework Element
                Determine Whether a Freezable Is Frozen
                Handle a Loaded Event
                Set Margins of Elements and Controls
                Make a Freezable Read-Only
                Obtain a Writable Copy of a Read-Only Freezable
                Flip a UIElement Horizontally or Vertically
                Use a Thickness Converter Object
                Handle the Context Menu Opening Event
        Element Tree and Serialization
            Trees in WPF
            Serialization Limitations of Xaml Writer. Save
            Initialization for Object Elements Not in an Object Tree
            How-to Topics
                Find an Element by Its Name
                Override the Logical Tree
        Properties
            Dependency Properties Overview
            Attached Properties Overview
            Dependency Property Callbacks and Validation
            Custom Dependency Properties
            Dependency Property Metadata
            Framework Property Metadata
            Dependency Property Value Precedence
            Read-Only Dependency Properties
            Property Value Inheritance
            Dependency Property Security
            Safe Constructor Patterns for Dependency Objects
            Collection-Type Dependency Properties
            XAML Loading and Dependency Properties
            How-to Topics
                Implement a Dependency Property
                Add an Owner Type for a Dependency Property
                Register an Attached Property
                Override Metadata for a Dependency Property
        Events
            Routed Events Overview
            Attached Events Overview
            Object Lifetime Events
            Marking Routed Events as Handled, and Class Handling
            Preview Events
            Property Change Events
            Visual Basic and WPF Event Handling
            Weak Event Patterns
            How-to Topics
                Add an Event Handler Using Code
                Handle a Routed Event
                Create a Custom Routed Event
                Find the Source Element in an Event Handler
                Add Class Handling for a Routed Event
        Input
            Input Overview
            Commanding Overview
            Focus Overview
            Styling for Focus in Controls, and Focus Visual Style
            Walkthrough: Creating Your First Touch Application
            How-to Topics
                Enable a Command
                Change the Cursor Type
                Change the Color of an Element Using Focus Events
                Apply a Focus Visual Style to a Control
                Detect When the Enter Key is Pressed
                Create a Rollover Effect Using Events
                Make an Object Follow the Mouse Pointer
                Create a Routed Command
                Implement ICommand Source
                Hook Up a Command to a Control with No Command Support
                Hook Up a Command to a Control with Command Support
            Digital Ink
                Overviews
                    Getting Started with Ink
                    Collecting Ink
                    Handwriting Recognition
                    Storing Ink
                    The Ink Object Model: Windows Forms and COM versus WPF
                    Advanced Ink Handling
                        Custom Rendering Ink
                        Intercepting Input from the Stylus
                        Creating an Ink Input Control
                        The Ink Threading Model
                How-to Topics
                    Select Ink from a Custom Control
                    Add Custom Data to Ink Data
                    Erase Ink on a Custom Control
                    Recognize Application Gestures
                    Drag and Drop Ink
                    Data Bind to an Ink Canvas
                    Analyze Ink with Analysis Hints
                    Rotate Ink
                    Disable the Real Time Stylus for WPF Applications
        Drag and Drop
            Drag and Drop Overview
            Data and Data Objects
            Walkthrough: Enabling Drag and Drop on a User Control
            How-to Topics
                Open a File That is Dropped on a Rich Text Box Control
                Create a Data Object
                Determine if a Data Format is Present in a Data Object
                List the Data Formats in a Data Object
                Retrieve Data in a Particular Data Format
                Store Multiple Data Formats in a Data Object
        Resources
            XAML Resources
                Resources and Code
                Merged Resource Dictionaries
                How-to Topics
                    Define and Reference a Resource
                    Use Application Resources
                    Use System Fonts
                    Use System Fonts Keys
                    Use System Parameters
                    Use System Parameters Keys
        Documents
            Documents in WPF
            Document Serialization and Storage
            Annotations
                Annotations Overview
                Annotations Schema
            Flow Content
                Flow Document Overview
                Text Element Content Model Overview
                Table Overview
                How-to Topics
                    Adjust Spacing Between Paragraphs
                    Build a Table Programmatically
                    Change the Flow Direction of Content Programmatically
                    Change the Text Wrapping Property Programmatically
                    Define a Table with XAML
                    Alter the Typography of Text
                    Enable Text Trimming
                    Insert an Element Into Text Programmatically
                    Manipulate Flow Content Elements through the Blocks Property
                    Manipulate Flow Content Elements through the Inlines Property
                    Manipulate a Flow Document through the Blocks Property
                    Manipulate a Table's Columns through the Columns Property
                    Manipulate a Table's Row Groups through the Row Groups Property
                    Use Flow Content Elements
                    Use Flow Document Column-Separating Attributes
            Typography
                Typography in WPF
                Clear Type Overview
                Clear Type Registry Settings
                Drawing Formatted Text
                Advanced Text Formatting
                Fonts
                    Open Type Font Features
                    Packaging Fonts with Applications
                    Sample Open Type Font Pack
                    How-to Topics
                        Enumerate System Fonts
                        Use the Font Size Converter Class
                Glyphs
                    Introduction to the Glyph Run Object and Glyphs Element
                    How to: Draw Text Using Glyphs
                How-to Topics
                    Create a Text Decoration
                    Specify Whether a Hyperlink is Underlined
                    Apply Transforms to Text
                    Apply Animations to Text
                    Create Text with a Shadow
                    Create Outlined Text
                    Draw Text to a Control's Background
                    Draw Text to a Visual
                    Use Special Characters in XAML
            Printing and Print System Management
                Printing Overview
                How-to Topics
                    Invoke a Print Dialog
                    Clone a Printer
                    Diagnose Problematic Print Job
                    Discover Whether a Print Job Can Be Printed At This Time of Day
                    Enumerate a Subset of Print Queues
                    Get Print System Object Properties Without Reflection
                    Programmatically Print XPS Files
                    Remotely Survey the Status of Printers
                    Validate and Merge Print Tickets
        Globalization and Localization
            WPF Globalization and Localization Overview
            Globalization for WPF
            Use Automatic Layout Overview
            Localization Attributes and Comments
            Bidirectional Features in WPF Overview
            How-to Topics
                Localize an Application
                Use Automatic Layout to Create a Button
                Use a Grid for Automatic Layout
                Use a Resource Dictionary to Manage Localizable String Resources
                Use Resources in Localizable Applications
        Layout
        Migration and Interoperability
            WPF and Windows Forms Interoperation
                Windows Forms and WPF Interoperability Input Architecture
                Layout Considerations for the Windows Forms Host Element
                Windows Forms Controls and Equivalent WPF Controls
                Windows Forms and WPF Property Mapping
                Troubleshooting Hybrid Applications
                Walkthrough: Hosting a Windows Forms Control in WPF
                Walkthrough: Hosting a Windows Forms Control in WPF by Using XAML
                Walkthrough: Hosting a Windows Forms Composite Control in WPF
                Walkthrough: Hosting an ActiveX Control in WPF
                How to: Enable Visual Styles in a Hybrid Application
                Walkthrough: Arranging Windows Forms Controls in WPF
                Walkthrough: Binding to Data in Hybrid Applications
                Walkthrough: Hosting a 3-D WPF Composite Control in Windows Forms
                Walkthrough: Hosting a WPF Composite Control in Windows Forms
                Walkthrough: Mapping Properties Using the Element Host Control
                Walkthrough: Mapping Properties Using the Windows Forms Host Element
                Walkthrough: Localizing a Hybrid Application
            WPF and Win32 Interoperation
                Technology Regions Overview
                Sharing Message Loops Between Win32 and WPF
                Hosting Win32 Content in WPF
                Walkthrough: Hosting a Win32 Control in WPF
                Walkthrough: Hosting WPF Content in Win32
                Walkthrough: Hosting a WPF Clock in Win32
            WPF and Direct3D9 Interoperation
                Performance Considerations for Direct3D9 and WPF Interoperability
                Walkthrough: Creating Direct3D9 Content for Hosting in WPF
                Walkthrough: Hosting Direct3D9 Content in WPF
        Performance
            Graphics Rendering Tiers
            Optimizing WPF Application Performance
                Planning for Application Performance
                Taking Advantage of Hardware
                Layout and Design
                2D Graphics and Imaging
                Object Behavior
                Application Resources
                Text
                Data Binding
                Controls
                Other Performance Recommendations
                Application Startup Time
            Walkthrough: Caching Application Data in a WPF Application
        Threading Model
        WPF Unmanaged API Reference
            Activate Function
            Create IDispatch STAForwarder Function
            Deactivate Function
            Forward Translate Accelerator Function
            Load From History Function
            Process Unhandled Exception Function
            Save ToHistory Function
            Set Fake Active Window Function

Download PDF
Feedback
Is this page helpful?
Yes No
How can we improve? Submit

Thanks for the feedback!

Comments or suggestions? Tell us here .
Thanks for the feedback!
English (United States)

    Previous Version Docs
    Blog
    Contribute
    Privacy & Cookies
    Terms of Use
    Site Feedback
    Trademarks

